/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'chedim' at '7/5/19 1:04 PM' with Gradle 3.2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
plugins {
  id "maven"
  id "maven-publish"
  id "signing"
  id "eclipse"
  id "java"
}

project.group = 'com.onkiup'
project.version = '0.9'

compileJava   {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
}

// In this section you declare the dependencies for your production and test code
dependencies {
  compile "com.onkiup:linker-parser-api:${project.version}"

  // The production code uses the SLF4J logging API at compile time
  compileOnly group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
  compileOnly group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.28'
  // https://mvnrepository.com/artifact/org.reflections/reflections
  compileOnly group: 'org.reflections', name: 'reflections', version: '0.9.11'
  compileOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'


  // Declare the dependency for your favourite test framework you want to use in your tests.
  // TestNG is also supported by the Gradle Test task. Just change the
  // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
  // 'test.useTestNG()' to your build script.
  testCompile 'junit:junit:4.12'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
  testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.2'
  testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.2'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
    }
  }
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        //authentication(userName: nexusUsername, password: nexusPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        //authentication(userName: nexusUsername, password: nexusPassword)
      }

      pom.project {
        name 'Linker-Parser'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'Text parser that uses Java classes as grammar definitions'
        url 'https://github.com/chedim/linker-parser'

        scm {
          connection 'scm:git:https://github.com/chedim/linker-parser.git'
          developerConnection 'scm:git:git@github.com:chedim/linker-parser.git'
          url 'https://github.com/chedim/linker-parser'
        }

        licenses {
          license {
            name 'MIT License'
            url 'https://raw.githubusercontent.com/chedim/linker-parser/master/LICENSE'
          }
        }

        developers {
          developer {
            id 'chedim'
            name 'Dmitrii Chechetkin'
            email 'chedim@chedim.com'
          }
        }
      }
    }
  }
}
